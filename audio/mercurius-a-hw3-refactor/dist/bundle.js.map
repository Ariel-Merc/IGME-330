{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://mercurius-a-hw2/./src/utils.ts","webpack://mercurius-a-hw2/./src/enums/audio-defaults.enum.ts","webpack://mercurius-a-hw2/./src/audio.ts","webpack://mercurius-a-hw2/./src/classes/RippleSprite.ts","webpack://mercurius-a-hw2/./src/classes/FishSprite.ts","webpack://mercurius-a-hw2/./src/canvas.ts","webpack://mercurius-a-hw2/./src/enums/main-defaults.enum.ts","webpack://mercurius-a-hw2/./src/main.ts","webpack://mercurius-a-hw2/./src/loader.ts"],"sourcesContent":["import {ColorStop} from \"./interfaces/colorStop.interface\";\r\n\r\nconst makeColor = ({ red, green, blue, alpha = 1 }:\r\n  { red: number; green: number; blue: number; alpha?: number }): string => {\r\n  return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n\r\nconst getRandom = (min: number, max: number) => {\r\n  return Math.random() * (max - min) + min;\r\n};\r\n\r\nconst getRandomColor = () => {\r\n  const floor = 35; // so that colors are not too bright or too dark \r\n  const getByte = () => getRandom(floor, 255 - floor);\r\n  return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n\r\ninterface GradientConfig {\r\n  ctx: CanvasRenderingContext2D;\r\n  startX: number;\r\n  startY: number;\r\n  endX: number;\r\n  endY: number;\r\n  colorStops: ColorStop[];\r\n}\r\n\r\nconst getLinearGradient = ({ ctx, startX, startY, endX, endY, colorStops }: \r\n  GradientConfig): CanvasGradient => {const lg = ctx.createLinearGradient(startX, startY, endX, endY);\r\n  for (let stop of colorStops) {\r\n    lg.addColorStop(stop.percent, stop.color);\r\n  }\r\n  return lg;\r\n};\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\nconst goFullscreen = (element: any) => {\r\n  if (element.requestFullscreen) {\r\n    element.requestFullscreen();\r\n  } else if (element.mozRequestFullscreen) {\r\n    element.mozRequestFullscreen();\r\n  } else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\r\n    element.mozRequestFullScreen();\r\n  } else if (element.webkitRequestFullscreen) {\r\n    element.webkitRequestFullscreen();\r\n  }\r\n  // .. and do nothing if the method is not supported\r\n};\r\n\r\nexport { makeColor, getRandomColor, getLinearGradient, goFullscreen };","enum AudioDefaults {\r\n    Gain = 0.5,\r\n    NumSamples = 256\r\n}\r\n\r\nexport {AudioDefaults};","// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\r\nlet audioCtx:AudioContext;\r\n\r\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\r\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\r\nlet element:HTMLAudioElement, \r\nsourceNode: MediaElementAudioSourceNode, \r\nanalyserNode: AnalyserNode, \r\ngainNode: GainNode;\r\n\r\n// 3 - here we are faking an enumeration\r\nimport { AudioDefaults } from './enums/audio-defaults.enum';\r\n\r\n// declare filters\r\nlet biquadFilter: BiquadFilterNode, lowBiquadFilter: BiquadFilterNode;\r\n\r\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\r\nconst setupWebAudio = (filePath: string) => {\r\n    // 1 - The || is because WebAudio has not been standardized across browsers yet\r\n    const AudioContext = window.AudioContext;\r\n    audioCtx = new AudioContext();\r\n\r\n    // 2 - this creates an <audio> element\r\n    element = new Audio(); // doc.querySelector(\"audio\")\r\n\r\n    // 3 - have it point at a sound file\r\n    loadSoundFile(filePath);\r\n\r\n    // 4 - create an a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    // setup biquad filter\r\n    biquadFilter = audioCtx.createBiquadFilter();\r\n    biquadFilter.type = \"highshelf\";\r\n\r\n    lowBiquadFilter = audioCtx.createBiquadFilter();\r\n    lowBiquadFilter.type = \"lowshelf\";\r\n\r\n    // 5 - create an analyser node\r\n    // note the UK spelling of \"Analyser\"\r\n    analyserNode = audioCtx.createAnalyser();\r\n\r\n\r\n    // 6 fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = AudioDefaults.NumSamples;\r\n\r\n    // 7 - create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = AudioDefaults.Gain;\r\n\r\n    // 8 - connect the nodes - we now have an audio graph\r\n    sourceNode.connect(biquadFilter); // hooking biquad in between source and analyser\r\n    biquadFilter.connect(lowBiquadFilter);\r\n    lowBiquadFilter.connect(analyserNode);\r\n\r\n    // hook up the analyser\r\n    analyserNode.connect(gainNode);\r\n    gainNode.connect(audioCtx.destination);\r\n}\r\n\r\nconst loadSoundFile = (filePath: string) => {\r\n    element.src = filePath;\r\n}\r\nconst playCurrentSound = () => {\r\n    element.play();\r\n}\r\nconst pauseCurrentSound = () => {\r\n    element.pause();\r\n}\r\nconst setVolume = (value: string | number) => {\r\n    value = Number(value); // make sure that it's a Number rather than a String\r\n    gainNode.gain.value = value;\r\n}\r\n\r\nconst toggleHighshelf = (highshelf: boolean) => {\r\n    // toggle trebble on when checked off\r\n    console.log(\"Highshelf toggle:\", highshelf);\r\n    if (highshelf) {\r\n        biquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n        biquadFilter.gain.setValueAtTime(25, audioCtx.currentTime);\r\n    } else {\r\n        biquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n    }\r\n}\r\n\r\nconst toggleLowshelf = (lowshelf: boolean) => {\r\n    // toggle base on when checked off\r\n    console.log(\"Lowshelf toggle:\", lowshelf);\r\n    if (lowshelf) {\r\n        lowBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime); // we created the `biquadFilter` (i.e. \"treble\") node last time\r\n        lowBiquadFilter.gain.setValueAtTime(25, audioCtx.currentTime);\r\n    } else {\r\n        lowBiquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n    }\r\n}\r\n\r\nexport {\r\n    audioCtx, setupWebAudio, playCurrentSound, pauseCurrentSound,\r\n    loadSoundFile, setVolume, toggleHighshelf, toggleLowshelf, analyserNode\r\n};","import { RippleParams } from \"../interfaces/rippleParams.interface\";\r\n\r\nexport default class Ripple {\r\n    x: number;\r\n    y: number;\r\n    radius: number;\r\n    alpha: number;\r\n    growthTime: number;\r\n    fadeTime: number;\r\n\r\n    constructor({ x, y, intensity }: RippleParams) {\r\n        Object.assign(this, { x, y });\r\n        this.radius = 5;\r\n        this.alpha = 1.0;\r\n        this.growthTime = 1 + intensity * 2;\r\n        this.fadeTime = 0.01 + intensity * 0.002;\r\n    }\r\n\r\n    update() {\r\n        this.radius += this.growthTime; // expand ripple\r\n        this.alpha -= this.fadeTime; // fade out the ripple\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = `rgba(100, 200, 255, ${this.alpha})`; // Light blue ripple\r\n        ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n    }\r\n\r\n    isDead() {\r\n        return this.alpha <= 0;\r\n    }\r\n}","import { FishParams } from \"../interfaces/fishParams.interface\";\r\n\r\nexport default class Fish {\r\n    image: HTMLImageElement;\r\n    radius: number;\r\n    theta: number;\r\n    baseSpeed: number;\r\n    currentSpeed: number;\r\n\r\n    constructor({ image, radius }: FishParams) {\r\n        this.image = new Image();\r\n        this.image.src = image;\r\n        this.radius = radius; // distance from center\r\n        this.theta = 0;\r\n        this.baseSpeed = 0.01;\r\n        this.currentSpeed = this.baseSpeed;\r\n    }\r\n\r\n    update(audio: Uint8Array) {\r\n        //let maxIntensity = Math.max(...audio) / 255; // Get strongest audio frequency\r\n        const percent = audio[0] / 255;\r\n        const maxIntensity = percent;\r\n        this.currentSpeed = this.baseSpeed + maxIntensity * 0.1; // Adjust speed accordingly\r\n\r\n        // Move in a clockwise circular path\r\n        this.theta -= this.currentSpeed;\r\n        if (this.theta < 0) {\r\n            this.theta += Math.PI * 2;\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, canvasWidth: number, canvasHeight: number) {\r\n        const x = canvasWidth / 2 + this.radius * Math.cos(this.theta);\r\n        const y = canvasHeight / 2 + this.radius * Math.sin(this.theta);\r\n\r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        ctx.rotate(this.theta);\r\n        // draw image\r\n        ctx.drawImage(this.image, -this.image.width / 2, -this.image.height / 2);\r\n        ctx.restore();\r\n    }\r\n}","/*\r\n    The purpose of this file is to take in the analyser node and a <canvas> element: \r\n      - the module will create a drawing context that points at the <canvas> \r\n      - it will store the reference to the analyser node\r\n      - in draw(), it will loop through the data in the analyser node\r\n      - and then draw something representative on the canvas\r\n      - maybe a better name for this file/module would be *visualizer.js* ?\r\n*/\r\n\r\nimport * as utils from './utils';\r\nimport Ripple from './classes/RippleSprite';\r\nimport Fish from \"./classes/FishSprite\";\r\n\r\n\r\nlet ctx: CanvasRenderingContext2D,\r\n    canvasWidth: number,\r\n    canvasHeight: number,\r\n    gradient: CanvasGradient,\r\n    analyserNode: AnalyserNode,\r\n    audioData: Uint8Array;\r\n\r\nlet rotation = 0;\r\nlet waveOffset = 0;\r\nlet ripples = []; // Array to store active ripples\r\nlet fish = new Fish({image:\"../images/fish2.png\", radius: -240});\r\nlet bgImage = new Image();\r\nbgImage.src = \"../images/pond.png\";\r\nlet lilypad = new Image();\r\nlilypad.src = \"../images/lotus.png\";\r\n\r\nimport { DrawParams } from './interfaces/drawParams.interface';\r\n\r\nconst setupCanvas = (canvasElement: HTMLCanvasElement,\r\n    analyserNodeRef: AnalyserNode) => {\r\n    // create drawing context\r\n    ctx = canvasElement.getContext(\"2d\")!;\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n    analyserNode = analyserNodeRef;\r\n    // this is the array where the analyser data will be stored\r\n    audioData = new Uint8Array(analyserNode.fftSize / 2);\r\n}\r\n\r\nconst draw = (params: DrawParams) => {\r\n    // 1 - populate the audioData array with the frequency data from the analyserNode\r\n    // notice these arrays are passed \"by reference\" \r\n    // Choose the correct data type based on user selection\r\n    if (params.visualizationMode === \"waveform\") {\r\n        analyserNode.getByteTimeDomainData(audioData);\r\n    } else {\r\n        analyserNode.getByteFrequencyData(audioData);\r\n    }\r\n    // 2 - draw background\r\n    ctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = 0.1;\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.restore();\r\n\r\n    // 3 - Set pond backdrop\r\n    if (params.showPond) {\r\n        ctx.save();\r\n        ctx.drawImage(bgImage, 0, 0, canvasWidth, canvasHeight);\r\n        ctx.restore();\r\n    }\r\n\r\n    if (params.showWaves) {\r\n        const sliderWave = document.querySelector(\"#slider-wave\") as HTMLInputElement;\r\n        let waveAmplitude = Number(sliderWave.value); // Get amplitude from slider\r\n        let speed = 2; // Wave movement speed\r\n        ctx.fillStyle = \"rgba(0, 150, 255, 0.8)\";\r\n\r\n        // move line to the right\r\n        waveOffset += speed;\r\n\r\n        for (let i = 0; i < 20; i++) { // Generate multiple circles per frame\r\n\r\n            let x = (waveOffset + i * 40) % canvasWidth; // Continuous movement to the right\r\n            let y = canvasHeight / 2 + Math.sin((waveOffset + i * 10) * 0.05) * waveAmplitude; // Apply amplitude\r\n\r\n            // Get audio intensity at this point\r\n            let audioIntensity = audioData[i] / 255;\r\n\r\n            // Apply pulsing effect\r\n            let baseRadius = 10;\r\n            let pulsingRadius = baseRadius;\r\n\r\n            if (audioIntensity > 0.55) {\r\n                pulsingRadius = baseRadius + (audioIntensity * 10);\r\n            }\r\n\r\n            // Draw circle\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, pulsingRadius, 0, Math.PI * 2);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n        }\r\n    }\r\n\r\n    // 4 - draw bars\r\n    if (params.showBars) {\r\n        let numBars = Math.min(64, audioData.length);\r\n        let innerRadius = 70; // circle of bars\r\n        let barWidth = 13;\r\n        let barHeightMultiplier = 0.5; // Adjust bar height\r\n\r\n        ctx.save();\r\n        ctx.strokeStyle = `rgba(64, 176, 33, 0.8)`;\r\n\r\n        for (let i = 0; i < numBars; i++) {\r\n            let angle = (i / numBars) * Math.PI * 2;\r\n            let barHeight = audioData[i] * barHeightMultiplier;\r\n\r\n            let startX = -Math.cos(angle) * innerRadius;\r\n            let startY = -Math.sin(angle) * innerRadius;\r\n            let endX = -Math.cos(angle) * (innerRadius + barHeight);\r\n            let endY = -Math.sin(angle) * (innerRadius + barHeight);\r\n\r\n            ctx.save();\r\n            ctx.lineWidth = barWidth;\r\n            ctx.translate((canvasWidth / 2), (canvasHeight / 2));\r\n            ctx.rotate(rotation);\r\n            ctx.beginPath();\r\n            ctx.moveTo(startX, startY);\r\n            ctx.lineTo(endX, endY);\r\n            ctx.stroke();\r\n            ctx.restore();\r\n        }\r\n\r\n        ctx.restore();\r\n\r\n    }\r\n\r\n    if (params.showFish) {\r\n        fish.update(audioData);\r\n        fish.draw(ctx, canvasWidth, canvasHeight);\r\n    }\r\n\r\n    // 5 - draw circles\r\n    if (params.showLillypad) {\r\n        let percent = audioData[0] / 255;\r\n        rotation += percent * 0.03;\r\n        ctx.save();\r\n        ctx.translate((canvasWidth / 2), (canvasHeight / 2));\r\n        ctx.rotate(-rotation);\r\n        ctx.drawImage(lilypad, -80, -100, 210, 190);\r\n        ctx.restore();\r\n    }\r\n\r\n    if (params.showRipples) {\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            const intensitySlider = document.querySelector(\"#slider-intensity\") as HTMLInputElement;\r\n            let percent = Number(intensitySlider.value);\r\n            if ((audioData[i] / 255) > 0.001 && Math.random() < 0.001) {\r\n\r\n                let ripple = new Ripple({\r\n                    x: Math.random() * canvasWidth,// random x\r\n                    y: Math.random() * canvasHeight, // random y\r\n                    intensity: percent // audio intensity\r\n                });\r\n                ripples.push(ripple);\r\n            }\r\n\r\n        }\r\n\r\n        for (let i = ripples.length - 1; i >= 0; i--) {\r\n            let r = ripples[i];\r\n\r\n            r.update();\r\n            r.draw(ctx);\r\n\r\n            if (r.isDead()) {\r\n                ripples.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // 6 - bitmap manipulation\r\n    let imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\r\n    let data = imageData.data;\r\n    let length = data.length;\r\n    let width = imageData.width;\r\n\r\n    // Iterate through each pixel, stepping 4 elements at a time (which is the RGBA for 1 pixel)\r\n    for (let i = 0; i < length; i += 4) {\r\n        // randomly change every 20th pixel to red\r\n        if (params.showNoise && Math.random() < 0.05) {\r\n            data[i] = data[i + 1] = data[i + 2] = 0; // zero out the red and green and blue channels\r\n            data[i] = 100; // make the red channel 100% red\r\n        }\r\n\r\n        // invert\r\n        if (params.showInvert) {\r\n            let red = data[i], green = data[i + 1], blue = data[i + 2];\r\n            data[i + 1] = 255 - red;\r\n            data[i + 1] = 255 - green;\r\n            data[i + 2] = 255 - blue;\r\n        }\r\n    }\r\n\r\n    // add embossing\r\n    for (let i = 0; i < length; i++) {\r\n        // do so only if checkbox is checked\r\n        if (params.showEmboss) {\r\n            if (i % 4 == 3) continue; // skip alpha channel\r\n            data[i] = 127 + 2 * data[i] - data[i + 4] - data[i + width * 4];\r\n        }\r\n    }\r\n\r\n    // copy image data back to canvas\r\n    ctx.putImageData(imageData, 0, 0);\r\n}\r\n\r\nexport { setupCanvas, draw };","enum MainDefaults {\r\n    Sound1 = \"./media/The Forests of Gliese.mp3\"\r\n}\r\n\r\nexport {MainDefaults};","/*\r\n  main.js is primarily responsible for hooking up the UI to the rest of the application \r\n  and setting up the main event loop\r\n*/\r\n\r\n// We will write the functions in this file in the traditional ES5 way\r\n// In this instance, we feel the code is more readable if written this way\r\n// If you want to re-write these as ES6 arrow functions, to be consistent with the other files, go ahead!\r\n\r\nimport * as utils from './utils';\r\nimport * as audio from './audio';\r\nimport * as canvas from './canvas';\r\n\r\nimport { DrawParams } from './interfaces/drawParams.interface';\r\n\r\n// draw params object with bools to toggle\r\nconst drawParams: DrawParams = {\r\n  showPond: false,\r\n  showBars: false,\r\n  showLillypad: false,\r\n  showRipples: false,\r\n  showNoise: false,\r\n  showInvert: false,\r\n  showEmboss: false,\r\n  showFish: false,\r\n  showWaves: false,\r\n  visualizationMode: \"frequency\"\r\n};\r\n\r\n\r\n// declare shelves\r\nlet highshelf = false;\r\nlet lowshelf = false;\r\n\r\n// 1 - here we are faking an enumeration\r\nimport { MainDefaults } from './enums/main-defaults.enum';\r\n\r\nconst init = () => {\r\n  console.log(`Testing utils.getRandomColor() import: ${utils.getRandomColor()}`);\r\n  audio.setupWebAudio(MainDefaults.Sound1);\r\n  let canvasElement = document.querySelector(\"canvas\"); // hookup <canvas> element\r\n  setupUI(canvasElement);\r\n  canvas.setupCanvas(canvasElement, audio.analyserNode);\r\n  loop();\r\n}\r\n\r\nconst setupUI = (canvasElement: HTMLCanvasElement) => {\r\n  // A - hookup fullscreen button\r\n  const fsButton = document.querySelector(\"#fs-button\") as HTMLButtonElement;\r\n\r\n  // add .onclick event to button\r\n  fsButton.onclick = e => {\r\n    console.log(\"goFullscreen() called\");\r\n    utils.goFullscreen(canvasElement);\r\n  };\r\n\r\n  // B\r\n  let playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\r\n  playButton.onclick = e => {\r\n    console.log(`audioCtx.state before = ${audio.audioCtx.state}`);\r\n\r\n    // check if context is in suspended state\r\n    if (audio.audioCtx.state == \"suspended\") {\r\n      audio.audioCtx.resume();\r\n    }\r\n    console.log(`audioCtx.state after = ${audio.audioCtx.state}`);\r\n    const target = e.target as HTMLInputElement;\r\n    if (target.dataset.playing == \"no\") {\r\n      // if track paused, then play\r\n      audio.playCurrentSound();\r\n      playButton.innerHTML = \"⏸\";\r\n      target.dataset.playing = \"yes\"; // css text will be set to pause\r\n\r\n    }\r\n    else {\r\n      // if track playing, pause it\r\n      audio.pauseCurrentSound();\r\n      playButton.innerHTML = \"▶\";\r\n      target.dataset.playing = \"no\"; // css text will be set to play\r\n    }\r\n  }\r\n\r\n  // C - hookup volume slider & label\r\n  const volumeSlider = document.querySelector(\"#slider-volume\") as HTMLInputElement;\r\n  let volumeLabel = document.querySelector(\"#volume-label\");\r\n\r\n  // add .oninput event to slider\r\n  volumeSlider.oninput = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    // set gain\r\n    audio.setVolume(target.value);\r\n    //update value of label to match slider value\r\n    const value = Number((e.target as HTMLInputElement).value);\r\n    volumeLabel.innerHTML = Math.round((value / 2 * 100)).toString();\r\n  };\r\n\r\n  // set value of label to match initial value of slider\r\n  volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n  // D - hookup track <select>\r\n  let trackSelect = document.querySelector(\"#select-track\") as HTMLSelectElement;\r\n  // add .onchange event to <select>\r\n  trackSelect.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    audio.loadSoundFile(target.value);\r\n    // pause current track if it is playing\r\n    if (playButton.dataset.playing == \"yes\") {\r\n      playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n      playButton.innerHTML = \"▶\";\r\n    }\r\n  }\r\n\r\n  // toggling check boxes\r\n  const pondCheckbox = document.querySelector(\"#cb-pond\") as HTMLInputElement;\r\n\r\n  pondCheckbox.onclick = () => {\r\n    drawParams.showPond = !drawParams.showPond;\r\n  }\r\n  const lillypadCheckbox = document.querySelector(\"#cb-lillypad\") as HTMLInputElement;\r\n\r\n  lillypadCheckbox.onclick = () => {\r\n    if (drawParams.showLillypad) {\r\n      drawParams.showLillypad = false;\r\n      drawParams.showBars = false;\r\n    }\r\n    else {\r\n      drawParams.showLillypad = true;\r\n      drawParams.showBars = true;\r\n    }\r\n  }\r\n  const noiseCheckbox = document.querySelector(\"#cb-noise\") as HTMLInputElement;\r\n\r\n  noiseCheckbox.onclick = () => {\r\n    if (drawParams.showNoise) {\r\n      drawParams.showNoise = false;\r\n    }\r\n    else {\r\n      drawParams.showNoise = true;\r\n    }\r\n  }\r\n  const invertCheckbox = document.querySelector(\"#cb-invert\") as HTMLInputElement;\r\n\r\n\r\n  invertCheckbox.onclick = () => {\r\n    if (drawParams.showInvert) {\r\n      drawParams.showInvert = false;\r\n    }\r\n    else {\r\n      drawParams.showInvert = true;\r\n    }\r\n  }\r\n  const embossCheckbox = document.querySelector(\"#cb-emboss\") as HTMLInputElement;\r\n\r\n  embossCheckbox.onclick = () => {\r\n    if (drawParams.showEmboss) {\r\n      drawParams.showEmboss = false;\r\n    }\r\n    else {\r\n      drawParams.showEmboss = true;\r\n    }\r\n  }\r\n  const rippleCheckbox = document.querySelector(\"#cb-ripple\") as HTMLInputElement;\r\n\r\n  rippleCheckbox.onclick = () => {\r\n    if (drawParams.showRipples) {\r\n      drawParams.showRipples = false;\r\n    }\r\n    else {\r\n      drawParams.showRipples = true;\r\n    }\r\n  }\r\n  const fishCheckbox = document.querySelector(\"#cb-fish\") as HTMLInputElement;\r\n\r\n  fishCheckbox.onclick = () => {\r\n    if (drawParams.showFish) {\r\n      drawParams.showFish = false;\r\n    }\r\n    else {\r\n      drawParams.showFish = true;\r\n    }\r\n  }\r\n  const visualizeCheckbox = document.querySelector(\"#select-viz\") as HTMLInputElement;\r\n\r\n  visualizeCheckbox.onchange = (e) => {\r\n    const target = e.target as HTMLInputElement;\r\n    drawParams.visualizationMode = target.value;\r\n  };\r\n\r\n\r\n\r\n  // Audio Modifications\r\n  const highshelfCheckbox = document.querySelector(\"#cb-highshelf\") as HTMLInputElement;\r\n  highshelfCheckbox.checked = highshelf;\r\n  // change the value of highshelf every time checkbox changes state\r\n  highshelfCheckbox.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    highshelf = target.checked;\r\n    audio.toggleHighshelf(highshelf); // turn on or turn off the filter\r\n  };\r\n  const lowshelfCheckbox = document.querySelector(\"#cb-lowshelf\") as HTMLInputElement;\r\n  lowshelfCheckbox.checked = lowshelf;\r\n  lowshelfCheckbox.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    lowshelf = target.checked;\r\n    audio.toggleLowshelf(lowshelf);\r\n  };\r\n\r\n\r\n} // end setupUI\r\n\r\nconst loop = () => {\r\n  canvas.draw(drawParams);\r\n  setTimeout(loop, 1000 / 60); // Limit the loop to 60 FPS\r\n}\r\n\r\nexport { init, drawParams };","import * as main from \"./main\";\r\nwindow.onload = () => {\r\n\tconsole.log(\"window.onload called\");\r\n\t// 1 - do preload here - load fonts, images, additional sounds, etc...\r\n\tconst loadJson = () => {\r\n\t\tconst url = \"data/av-data.json\";\r\n\t\tconst xhr = new XMLHttpRequest();\r\n\t\txhr.onload = (e) => {\r\n\t\t\tconst target = e.target as XMLHttpRequest;\r\n\t\t\tconsole.log(`In onload - HTTP Status Code = ${target.status}`);\r\n\t\t\tconst data = target.responseText;\r\n\r\n\t\t\tlet json: any;\r\n\t\t\t// try to parse data from json file\r\n\t\t\ttry {\r\n\t\t\t\tjson = JSON.parse(data);\r\n\t\t\t}\r\n\t\t\tcatch {\r\n\t\t\t\tdocument.querySelector(\"#output\").innerHTML = \"json parse failed\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// populate header\r\n\t\t\tlet header = document.querySelector(\"h1\");\r\n\t\t\theader.innerHTML = json.title;\r\n\r\n\t\t\t// populate track selection\r\n\t\t\tlet trackSelect = document.querySelector(\"#select-track\");\r\n\t\t\tfor (let track of json.audioFiles) {\r\n\t\t\t\tlet option = document.createElement(\"option\");\r\n\t\t\t\toption.value = track.fileName;\r\n\t\t\t\toption.innerHTML = track.trackName;\r\n\t\t\t\ttrackSelect.appendChild(option);\r\n\t\t\t}\r\n\r\n\t\t\tObject.assign(main.drawParams, json.uiState);\r\n\t\t}\r\n\r\n\t\txhr.onerror = e => {\r\n\t\t\tconst target = e.target as XMLHttpRequest;\r\n\t\t\tconsole.log(`In onerror - HTTP Status Code = ${target.status}`);\r\n\t\t};\r\n\t\txhr.open(\"GET\", url);\r\n\t\txhr.send();\r\n\t}\r\n\t// 2 - start up app\r\n\tloadJson();\r\n\tmain.init();\r\n}"],"names":["AudioDefaults","audioCtx","sourceNode","analyserNode","gainNode","biquadFilter","lowBiquadFilter","loadSoundFile","filePath","src","x","y","intensity","Object","assign","this","radius","alpha","growthTime","fadeTime","update","draw","ctx","beginPath","strokeStyle","arc","Math","PI","stroke","closePath","isDead","canvasWidth","canvasHeight","audioData","image","Image","theta","baseSpeed","currentSpeed","audio","maxIntensity","cos","sin","save","translate","rotate","drawImage","width","height","restore","rotation","waveOffset","ripples","fish","bgImage","MainDefaults","lilypad","drawParams","showPond","showBars","showLillypad","showRipples","showNoise","showInvert","showEmboss","showFish","showWaves","visualizationMode","highshelf","lowshelf","init","AudioContext","getByte","console","log","random","Sound1","window","Audio","createMediaElementSource","createBiquadFilter","type","createAnalyser","fftSize","NumSamples","createGain","gain","value","Gain","connect","destination","canvasElement","document","querySelector","setupUI","analyserNodeRef","getContext","Uint8Array","loop","onclick","e","element","requestFullscreen","mozRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","playButton","state","resume","target","dataset","playing","play","innerHTML","pause","volumeSlider","volumeLabel","oninput","Number","round","toString","dispatchEvent","Event","onchange","MouseEvent","highshelfCheckbox","checked","frequency","setValueAtTime","currentTime","lowshelfCheckbox","params","getByteTimeDomainData","getByteFrequencyData","fillStyle","globalAlpha","fillRect","sliderWave","waveAmplitude","i","audioIntensity","pulsingRadius","fill","numBars","min","length","angle","barHeight","startX","startY","endX","endY","lineWidth","moveTo","lineTo","percent","intensitySlider","ripple","push","r","splice","imageData","getImageData","data","red","green","blue","putImageData","setTimeout","onload","xhr","XMLHttpRequest","status","json","responseText","JSON","parse","title","trackSelect","audioFiles","track","option","createElement","fileName","trackName","appendChild","uiState","onerror","open","send"],"sourceRoot":""}